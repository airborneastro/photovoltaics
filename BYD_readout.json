[
    {
        "id": "82c27bbba924f8af",
        "type": "tab",
        "label": "BYD readout",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c1bf54aba015a59c",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "packet 1",
        "func": "msg.payload = Buffer.from(\"01030500001984cc\", \"hex\");\nmsg.host = flow.get(\"BYD_IP\")\nmsg.port = flow.get(\"BYD_Port\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 240,
        "wires": [
            [
                "dff508b083adf076"
            ]
        ]
    },
    {
        "id": "dff508b083adf076",
        "type": "tcp request",
        "z": "82c27bbba924f8af",
        "name": "BYD Battery",
        "server": "",
        "port": "",
        "out": "count",
        "ret": "buffer",
        "splitc": "55",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 510,
        "y": 240,
        "wires": [
            [
                "73faaa497ab29bb4",
                "bdc2393d72ae0913"
            ]
        ]
    },
    {
        "id": "73faaa497ab29bb4",
        "type": "buffer-parser",
        "z": "82c27bbba924f8af",
        "name": "parse P1",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "int16be",
                "name": "hvsSOC",
                "offset": 3,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "hvsMaxVolt",
                "offset": 5,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.01",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "hvsMinVolt",
                "offset": 7,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.01",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "hvsSOH",
                "offset": 9,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "hvsCurrent",
                "offset": 11,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.100",
                "mask": ""
            },
            {
                "type": "uint16be",
                "name": "hvsBattVolt",
                "offset": 13,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.01",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "hvsMaxTemp",
                "offset": 15,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "hvsMinTemp",
                "offset": 17,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "hvsBatTemp",
                "offset": 19,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "hvsError",
                "offset": 29,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "hvsParamT",
                "offset": 31,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.01",
                "mask": ""
            },
            {
                "type": "uint16be",
                "name": "hvsOutVolt",
                "offset": 35,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.01",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 700,
        "y": 240,
        "wires": [
            [
                "98b2fd36fec341e1"
            ]
        ]
    },
    {
        "id": "98b2fd36fec341e1",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "process P1",
        "func": "msg.payload.hvsPower = Math.round((msg.payload.hvsCurrent * msg.payload.hvsOutVolt)* 100) / 100.0;\nmsg.payload.hvsDiffVolt = Math.round((msg.payload.hvsMaxVolt - msg.payload.hvsMinVolt) * 100) / 100;\nmsg.payload.hvsCurrent = (Math.round(msg.payload.hvsCurrent  * 100) / 100.0);\nconst myErrors = [\n    \"High Temperature Charging (Cells)\",\n    \"Low Temperature Charging (Cells)\",\n    \"Over Current Discharging\",\n    \"Over Current Charging\",\n    \"Main circuit Failure\",\n    \"Short Current Alarm\",\n    \"Cells Imbalance\",\n    \"Current Sensor Failure\",\n    \"Battery Over Voltage\",\n    \"Battery Under Voltage\",\n    \"Cell Over Voltage\",\n    \"Cell Under Voltage\",\n    \"Voltage Sensor Failure\",\n    \"Temperature Sensor Failure\",\n    \"High Temperature Discharging (Cells)\",\n    \"Low Temperature Discharging (Cells)\"\n];\nvar hvsErrorString = \"\";\n//        hvsError = 65535;\nfor (let j = 0; j < 16; j++) {\n    if (((1 << j) & msg.payload.hvsError) !== 0) {\n        if (hvsErrorString.length > 0) {\n            hvsErrorString += \"; \";\n        }\n        hvsErrorString += myErrors[j];\n    }\n}\nif (hvsErrorString.length === 0) { hvsErrorString = \"no Error\"; }\nmsg.payload.hvsErrorString = hvsErrorString;\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 240,
        "wires": [
            [
                "e98905333cf9357f"
            ]
        ]
    },
    {
        "id": "e98905333cf9357f",
        "type": "debug",
        "z": "82c27bbba924f8af",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 240,
        "wires": []
    },
    {
        "id": "9498d319785b66ef",
        "type": "inject",
        "z": "82c27bbba924f8af",
        "name": "General Batt info",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 160,
        "wires": [
            [
                "88919198f87fa0b3"
            ]
        ]
    },
    {
        "id": "88919198f87fa0b3",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "packet 0",
        "func": "msg.payload = Buffer.from(\"010300000066c5e0\", \"hex\");\nmsg.host = flow.get(\"BYD_IP\")\nmsg.port = flow.get(\"BYD_Port\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 160,
        "wires": [
            [
                "84f97cc19e86d7ea"
            ]
        ]
    },
    {
        "id": "6ddfbf8d464ec2a0",
        "type": "buffer-parser",
        "z": "82c27bbba924f8af",
        "name": "parse P0",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "string",
                "name": "SerialNo",
                "offset": 3,
                "length": 19,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint8",
                "name": "hvsBattType_fromSerial",
                "offset": 5,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint8",
                "name": "hvsBMUA_u",
                "offset": 27,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint8",
                "name": "hvsBMUA_l",
                "offset": 28,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint8",
                "name": "hvsBMUB_u",
                "offset": 29,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint8",
                "name": "hvsBMUB_l",
                "offset": 30,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint8",
                "name": "hvsBMS_u",
                "offset": 31,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint8",
                "name": "hvsBMS_l",
                "offset": 32,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint8",
                "name": "hvsTowers",
                "offset": 36,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.0625",
                "mask": "0xF0"
            },
            {
                "type": "uint8",
                "name": "hvsModules",
                "offset": 36,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": "0x0F"
            },
            {
                "type": "uint8",
                "name": "hvsGrid",
                "offset": 38,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 700,
        "y": 160,
        "wires": [
            [
                "711d755660a625ab"
            ]
        ]
    },
    {
        "id": "84f97cc19e86d7ea",
        "type": "tcp request",
        "z": "82c27bbba924f8af",
        "name": "BYD Battery",
        "server": "",
        "port": "",
        "out": "count",
        "ret": "buffer",
        "splitc": "207",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 510,
        "y": 160,
        "wires": [
            [
                "6ddfbf8d464ec2a0",
                "c1bf54aba015a59c"
            ]
        ]
    },
    {
        "id": "f74706ec709b68d7",
        "type": "debug",
        "z": "82c27bbba924f8af",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 160,
        "wires": []
    },
    {
        "id": "711d755660a625ab",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "process P0",
        "func": "msg.payload.hvsBMUA = \"V\" + msg.payload.hvsBMUA_u.toString() + \".\" + msg.payload.hvsBMUA_l.toString();\nmsg.payload.hvsBMUB = \"V\" + msg.payload.hvsBMUB_u.toString() + \".\" + msg.payload.hvsBMUB_l.toString();\nmsg.payload.hvsBMS = \"V\" + msg.payload.hvsBMS_u.toString() + \".\" + msg.payload.hvsBMS_l.toString(); \nmsg.payload.hvsModules = (msg.payload.hvsModules);\nflow.set(\"hvsModules\", msg.payload.hvsModules);\nswitch  (msg.payload.hvsGrid)\n{\n    case 0:\n        msg.payload.hvsGrid = \"OffGrid\"\n        break;\n    case 1:\n        msg.payload.hvsGrid = \"OnGrid\"\n        break;\n    case 2:\n        msg.payload.hvsGrid = \"OffGrid\"\n}\nflow.set(\"hvsBattType_fromSerial\", msg.payload.hvsBattType_fromSerial);\n \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 160,
        "wires": [
            [
                "f74706ec709b68d7"
            ]
        ]
    },
    {
        "id": "1d481640e8640cc0",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "packet 5",
        "func": "msg.payload = Buffer.from(\"01030558004104e5\", \"hex\");\nmsg.host = flow.get(\"BYD_IP\")\nmsg.port = flow.get(\"BYD_Port\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 600,
        "wires": [
            [
                "7cb3cff9e167e039"
            ]
        ]
    },
    {
        "id": "7cb3cff9e167e039",
        "type": "tcp request",
        "z": "82c27bbba924f8af",
        "name": "BYD Battery",
        "server": "",
        "port": "",
        "out": "count",
        "ret": "buffer",
        "splitc": "135",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 510,
        "y": 600,
        "wires": [
            [
                "44e44acc783bb4c5",
                "8acd9b92b488f664"
            ]
        ]
    },
    {
        "id": "0a9f875b9769ce4b",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "packet 4",
        "func": "msg.payload = Buffer.from(\"010305510001d517\", \"hex\");\nmsg.host = flow.get(\"BYD_IP\")\nmsg.port = flow.get(\"BYD_Port\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 480,
        "wires": [
            [
                "e76d1996868897fe"
            ]
        ]
    },
    {
        "id": "e76d1996868897fe",
        "type": "tcp request",
        "z": "82c27bbba924f8af",
        "name": "BYD Battery",
        "server": "",
        "port": "",
        "out": "count",
        "ret": "buffer",
        "splitc": "7",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 510,
        "y": 480,
        "wires": [
            [
                "8725cc88defd606c"
            ]
        ]
    },
    {
        "id": "d3e243abacb391a0",
        "type": "inject",
        "z": "82c27bbba924f8af",
        "name": "Cells info stack 1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "turm1",
        "payloadType": "str",
        "x": 140,
        "y": 420,
        "wires": [
            [
                "06072ae38d2a5c80"
            ]
        ]
    },
    {
        "id": "06072ae38d2a5c80",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "packet 3",
        "func": "switch (msg.payload)\n{\n    case \"turm1\":\n        msg.payload = Buffer.from(\"0110055000020400018100f853\", \"hex\");\n        break;\n\n    case \"turm2\": \n        msg.payload = Buffer.from(\"01100550000204000281000853\", \"hex\");\n        break;\n    \n    case \"turm3\":\n        msg.payload = Buffer.from(\"01100550000204000381005993\", \"hex\");\n}\n\nmsg.host = flow.get(\"BYD_IP\")\nmsg.port = flow.get(\"BYD_Port\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 420,
        "wires": [
            [
                "e2a1fe601f4a4345"
            ]
        ]
    },
    {
        "id": "e2a1fe601f4a4345",
        "type": "tcp request",
        "z": "82c27bbba924f8af",
        "name": "BYD Battery",
        "server": "",
        "port": "",
        "out": "count",
        "ret": "buffer",
        "splitc": "8",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 510,
        "y": 420,
        "wires": [
            [
                "0a9f875b9769ce4b"
            ]
        ]
    },
    {
        "id": "44e44acc783bb4c5",
        "type": "buffer-parser",
        "z": "82c27bbba924f8af",
        "name": "parse P5",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "int16be",
                "name": "hvsMaxmVolt",
                "offset": 5,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.001",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "hvsMinmVolt",
                "offset": 7,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.001",
                "mask": ""
            },
            {
                "type": "uint8",
                "name": "hvsMaxmVoltCell",
                "offset": 9,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint8",
                "name": "hvsMinmVoltCell",
                "offset": 10,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint8",
                "name": "hvsMaxTempCell",
                "offset": 15,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint8",
                "name": "hvsMinTempCell",
                "offset": 16,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "hvsSOCDiagnosis",
                "offset": 53,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.1",
                "mask": ""
            },
            {
                "type": "buffer",
                "name": "data_volt",
                "offset": 101,
                "length": 32,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 700,
        "y": 600,
        "wires": [
            [
                "eb12f357e462128e",
                "ba469c6dc623a60f"
            ]
        ]
    },
    {
        "id": "8c87e81202a82f2d",
        "type": "debug",
        "z": "82c27bbba924f8af",
        "name": "debug 21",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 600,
        "wires": []
    },
    {
        "id": "eb12f357e462128e",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "process P5",
        "func": "var buffer = Buffer.from(msg.payload.data_volt)\nvar hvsBatteryVoltsperCell = [];\nconst MaxCells = 16;\n//hvsBatteryVoltsperCell[0]=0; //BYD counts from 1\nfor (let i = 0; i < MaxCells; i++)\n{\n   hvsBatteryVoltsperCell[i+1] = ((buffer[i*2]*256 + buffer[i*2+1])/1000.0);\n}\nmsg.payload = {hvsBatteryVoltsperCell };\nflow.set(\"hvsBatteryVoltsperCell\", hvsBatteryVoltsperCell);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 600,
        "wires": [
            [
                "8c87e81202a82f2d"
            ]
        ]
    },
    {
        "id": "bdc2393d72ae0913",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "packet 2",
        "func": "msg.payload = Buffer.from(\"010300100003040e\", \"hex\");\nmsg.host = flow.get(\"BYD_IP\")\nmsg.port = flow.get(\"BYD_Port\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 320,
        "wires": [
            [
                "e2b212df0636c8aa"
            ]
        ]
    },
    {
        "id": "e2b212df0636c8aa",
        "type": "tcp request",
        "z": "82c27bbba924f8af",
        "name": "BYD Battery",
        "server": "",
        "port": "",
        "out": "count",
        "ret": "buffer",
        "splitc": "11",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 510,
        "y": 320,
        "wires": [
            [
                "1d668c13834f5bef"
            ]
        ]
    },
    {
        "id": "1d668c13834f5bef",
        "type": "buffer-parser",
        "z": "82c27bbba924f8af",
        "name": "parse P2",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "uint8",
                "name": "hvsInvType",
                "offset": 3,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint8",
                "name": "hvsBattType",
                "offset": 5,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 700,
        "y": 320,
        "wires": [
            [
                "6895aebc3bec5ac5"
            ]
        ]
    },
    {
        "id": "6c1fe81bd54cbe09",
        "type": "debug",
        "z": "82c27bbba924f8af",
        "name": "debug 22",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 320,
        "wires": []
    },
    {
        "id": "6895aebc3bec5ac5",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "process P2",
        "func": "var NumCells = 0;\nvar NumTemps = 0;\nconst myINVs = [\n    \"Fronius HV\", //0\n    \"Goodwe HV\", //1\n    \"Fronius HV\", //2\n    \"Kostal HV\", //3\n    \"Goodwe HV\",  //4\n    \"SMA SBS3.7/5.0\", //5\n    \"Kostal HV\", //6\n    \"SMA SBS3.7/5.0\",  //7\n    \"Sungrow HV\", //8\n    \"Sungrow HV\", //9\n    \"Kaco HV\", //10\n    \"Kaco HV\", //11\n    \"Ingeteam HV\", //12\n    \"Ingeteam HV\", //13\n    \"SMA SBS 2.5 HV\", //14\n    \"undefined\", //15\n    \"SMA SBS 2.5 HV\", //16\n    \"Fronius HV\", //17\n    \"undefined\", //18\n    \"SMA STP\"  //19\n];\nconst myINVsLVS = [\n    \"Fronius HV\",\n    \"Goodwe HV\",\n    \"Goodwe HV\",\n    \"Kostal HV\",\n    \"Selectronic LV\",\n    \"SMA SBS3.7/5.0\",\n    \"SMA LV\",\n    \"Victron LV\",\n    \"Suntech LV\",\n    \"Sungrow HV\",\n    \"Kaco HV\",\n    \"Studer LV\",\n    \"Solar Edge LV\",\n    \"Ingeteam HV\",\n    \"Sungrow LV\",\n    \"Schneider LV\",\n    \"SMA SBS2.5 HV\",\n    \"Solar Edge LV\",\n    \"Solar Edge LV\",\n    \"Solar Edge LV\",\n    \"unknown\"\n];\nswitch (msg.payload.hvsBattType) {\n    case 0:\n        break;\n    case 1: //HVM 16 Cells per module\n        NumCells = flow.get(\"hvsModules\") * 16;\n        NumTemps = flow.get(\"hvsModules\") * 8\n        break;\n    case 2: //HVS 32 cells per module\n        NumCells = flow.get(\"hvsModules\") * 32;\n        NumTemps = flow.get(\"hvsModules\") * 12;\n}  \nif ((flow.get(\"hvsBattType_fromSerial\") === 49) || (flow.get(\"hvsBattType_fromSerial\") === 50))\n    {NumCells = flow.get(\"hvsModules\") * 7;\n     NumTemps = 0}\nif (NumCells > 160) {NumCells = 160};\nif (NumTemps > 64) {NumTemps = 64\n}\nvar Battype = flow.get(\"hvsBattType_fromSerial\")\nflow.set(\"hvsNumCells\",NumCells);\nflow.set(\"hvsNumTemps\",NumTemps);\nflow.get(\"hvsBattType_fromSerial\")\nif ((Battype == 49) || (Battype == 50)) { //unterschiedliche WR-Tabelle je nach Batt-Typ\n    msg.payload.hvsInverter = myINVsLVS[msg.payload.hvsInvType];\n}\nelse {\n    msg.payload.hvsInverter = myINVs[msg.payload.hvsInvType];\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 320,
        "wires": [
            [
                "6c1fe81bd54cbe09"
            ]
        ]
    },
    {
        "id": "8acd9b92b488f664",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "packet 6",
        "func": "msg.payload = Buffer.from(\"01030558004104e5\", \"hex\");\nmsg.host = flow.get(\"BYD_IP\")\nmsg.port = flow.get(\"BYD_Port\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 660,
        "wires": [
            [
                "ab919006df0f72ce"
            ]
        ]
    },
    {
        "id": "ab919006df0f72ce",
        "type": "tcp request",
        "z": "82c27bbba924f8af",
        "name": "BYD Battery",
        "server": "",
        "port": "",
        "out": "count",
        "ret": "buffer",
        "splitc": "135",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 510,
        "y": 660,
        "wires": [
            [
                "7d6724f442bbc926",
                "e7bdfaac86ba5bec"
            ]
        ]
    },
    {
        "id": "7d6724f442bbc926",
        "type": "buffer-parser",
        "z": "82c27bbba924f8af",
        "name": "parse P6",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "buffer",
                "name": "data_volt",
                "offset": 5,
                "length": -1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 700,
        "y": 660,
        "wires": [
            [
                "2e3cac6546d4cd0a"
            ]
        ]
    },
    {
        "id": "2e3cac6546d4cd0a",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "process P6",
        "func": "var buffer = Buffer.from(msg.payload.data_volt)\nvar hvsBatteryVoltsperCell = [];\nhvsBatteryVoltsperCell = flow.get(\"hvsBatteryVoltsperCell\");\nvar MaxCells = flow.get(\"hvsNumCells\") - 16;\nif (MaxCells > 64) { MaxCells = 64; }\nfor (let i = 0; i < MaxCells; i++)\n{\n   hvsBatteryVoltsperCell[i+16+1] = ((buffer[i*2]*256 + buffer[i*2+1])/1000.0);\n\n}\nmsg.payload = {hvsBatteryVoltsperCell};\nflow.set(\"hvsBatteryVoltsperCell\", hvsBatteryVoltsperCell);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 660,
        "wires": [
            [
                "e22cc9dc4789878c"
            ]
        ]
    },
    {
        "id": "e22cc9dc4789878c",
        "type": "debug",
        "z": "82c27bbba924f8af",
        "name": "debug 24",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 660,
        "wires": []
    },
    {
        "id": "e7bdfaac86ba5bec",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "packet 7",
        "func": "msg.payload = Buffer.from(\"01030558004104e5\", \"hex\");\nmsg.host = flow.get(\"BYD_IP\")\nmsg.port = flow.get(\"BYD_Port\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 720,
        "wires": [
            [
                "221f4686a5bc4096"
            ]
        ]
    },
    {
        "id": "221f4686a5bc4096",
        "type": "tcp request",
        "z": "82c27bbba924f8af",
        "name": "BYD Battery",
        "server": "",
        "port": "",
        "out": "count",
        "ret": "buffer",
        "splitc": "135",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 510,
        "y": 720,
        "wires": [
            [
                "a9354e6ad9a7211d",
                "323554b6efed8c17"
            ]
        ]
    },
    {
        "id": "a9354e6ad9a7211d",
        "type": "buffer-parser",
        "z": "82c27bbba924f8af",
        "name": "parse P7",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "buffer",
                "name": "data_volt",
                "offset": 5,
                "length": 96,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "buffer",
                "name": "data_temp",
                "offset": 103,
                "length": 30,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 700,
        "y": 720,
        "wires": [
            [
                "250287bc5c50d9d4"
            ]
        ]
    },
    {
        "id": "250287bc5c50d9d4",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "process P7",
        "func": "var buffer = Buffer.from(msg.payload.data_volt)\nvar hvsBatteryVoltsperCell = [];\nvar hvsBatteryTempperCell = [];\nhvsBatteryVoltsperCell = flow.get(\"hvsBatteryVoltsperCell\");\nvar MaxCells = flow.get(\"hvsNumCells\") - 80;\nif (MaxCells > 48) { MaxCells = 48; }\nfor (let i = 0; i < MaxCells; i++)\n{\n   hvsBatteryVoltsperCell[i+80+1] = ((buffer[i*2]*256 + buffer[i*2+1])/1000.0);\n}\nbuffer = Buffer.from(msg.payload.data_temp);\n//hvsBatteryTempperCell[0]=0; //BYD counts from 1\nvar MaxTemps = flow.get(\"hvsNumTemps\");\nif (MaxTemps > 30) { MaxTemps = 30; }\nfor (let i = 0; i < MaxTemps; i++) {\n   hvsBatteryTempperCell[i+1] = buffer[i];\n}\n//hvsBatteryTempperCell = msg.payload.data_temp;\nmsg.payload = { hvsBatteryVoltsperCell, hvsBatteryTempperCell };\nflow.set(\"hvsBatteryVoltsperCell\", hvsBatteryVoltsperCell);\nflow.set(\"hvsBatteryTempperCell\", hvsBatteryTempperCell)\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 720,
        "wires": [
            [
                "0431407c362f6876"
            ]
        ]
    },
    {
        "id": "0431407c362f6876",
        "type": "debug",
        "z": "82c27bbba924f8af",
        "name": "debug 25",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 720,
        "wires": []
    },
    {
        "id": "323554b6efed8c17",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "packet 8",
        "func": "msg.payload = Buffer.from(\"01030558004104e5\", \"hex\");\nmsg.host = flow.get(\"BYD_IP\")\nmsg.port = flow.get(\"BYD_Port\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 780,
        "wires": [
            [
                "af8ac899a3cb7afe"
            ]
        ]
    },
    {
        "id": "af8ac899a3cb7afe",
        "type": "tcp request",
        "z": "82c27bbba924f8af",
        "name": "BYD Battery",
        "server": "",
        "port": "",
        "out": "count",
        "ret": "buffer",
        "splitc": "135",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 510,
        "y": 780,
        "wires": [
            [
                "d6254bdf65160673",
                "7c906444615bd2f2"
            ]
        ]
    },
    {
        "id": "d6254bdf65160673",
        "type": "buffer-parser",
        "z": "82c27bbba924f8af",
        "name": "parse P8",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "buffer",
                "name": "data_temp",
                "offset": 5,
                "length": -1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 700,
        "y": 780,
        "wires": [
            [
                "3041d68fbcb15582"
            ]
        ]
    },
    {
        "id": "3041d68fbcb15582",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "process P8",
        "func": "var buffer = Buffer.from(msg.payload.data_temp)\nvar hvsBatteryTempperCell = [];\nvar hvsBatteryVoltsperCell = [];\nhvsBatteryVoltsperCell = flow.get(\"hvsBatteryVoltsperCell\");\nhvsBatteryTempperCell = flow.get(\"hvsBatteryTempperCell\");\nbuffer = Buffer.from(msg.payload.data_temp);\nvar MaxTemps = flow.get(\"hvsNumTemps\") -30;\nif (MaxTemps > 34) { MaxTemps = 34; }\nfor (let i = 0; i < MaxTemps; i++) {\n   hvsBatteryTempperCell[i+30+1] = buffer[i];\n}\nmsg.payload = { hvsBatteryVoltsperCell, hvsBatteryTempperCell };\nflow.set(\"hvsBatteryVoltsperCell\", hvsBatteryVoltsperCell);\nflow.set(\"hvsBatteryTempperCell\", hvsBatteryTempperCell)\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 780,
        "wires": [
            [
                "2d00c17f885f345b",
                "8ac2652f45468bbd",
                "143fc8668674fdfc"
            ]
        ]
    },
    {
        "id": "2d00c17f885f345b",
        "type": "debug",
        "z": "82c27bbba924f8af",
        "name": "debug 26",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 780,
        "wires": []
    },
    {
        "id": "8c0a926b81e92c0d",
        "type": "debug",
        "z": "82c27bbba924f8af",
        "name": "debug 27",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 540,
        "wires": []
    },
    {
        "id": "ba469c6dc623a60f",
        "type": "change",
        "z": "82c27bbba924f8af",
        "name": "without voltage data",
        "rules": [
            {
                "t": "delete",
                "p": "payload.data_volt",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 540,
        "wires": [
            [
                "8c0a926b81e92c0d",
                "8ac2652f45468bbd"
            ]
        ]
    },
    {
        "id": "8ac2652f45468bbd",
        "type": "join",
        "z": "82c27bbba924f8af",
        "name": "",
        "mode": "custom",
        "build": "merged",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1310,
        "y": 680,
        "wires": [
            [
                "eb3659071c954ab0"
            ]
        ]
    },
    {
        "id": "eb3659071c954ab0",
        "type": "debug",
        "z": "82c27bbba924f8af",
        "name": "Final result cells info",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1480,
        "y": 680,
        "wires": []
    },
    {
        "id": "b18bdf672ae7df9f",
        "type": "change",
        "z": "82c27bbba924f8af",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1110,
        "y": 840,
        "wires": [
            [
                "8ac2652f45468bbd"
            ]
        ]
    },
    {
        "id": "321f49e790f9ebbb",
        "type": "comment",
        "z": "82c27bbba924f8af",
        "name": "README, be warned",
        "info": "\"General Batt info\" has to run once before reading cells data.\nIt is unclear if calling \"Cells info\" too often causes harm.\nYou are on your own risk!\nGeneral Batt info could probably polled regularly",
        "x": 160,
        "y": 360,
        "wires": []
    },
    {
        "id": "7c906444615bd2f2",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "hvsNumCells > 128?",
        "func": "msg.payload = Buffer.from(\"01100100000306444542554700176f\", \"hex\");\nmsg.host = flow.get(\"BYD_IP\")\nmsg.port = flow.get(\"BYD_Port\")\nif (flow.get(\"hvsNumCells\") > 128)\n    {return msg}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 860,
        "wires": [
            [
                "eb394f6deb99a8a0"
            ]
        ]
    },
    {
        "id": "eb394f6deb99a8a0",
        "type": "tcp request",
        "z": "82c27bbba924f8af",
        "name": "BYD Battery",
        "server": "",
        "port": "",
        "out": "count",
        "ret": "buffer",
        "splitc": "8",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 510,
        "y": 860,
        "wires": [
            [
                "9074e997325bd75a"
            ]
        ]
    },
    {
        "id": "9074e997325bd75a",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "packet 10",
        "func": "msg.payload = Buffer.from(\"0110055000020400018100f853\", \"hex\");\nmsg.host = flow.get(\"BYD_IP\")\nmsg.port = flow.get(\"BYD_Port\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 920,
        "wires": [
            [
                "d027bf5fc181d86f"
            ]
        ]
    },
    {
        "id": "371e9355eb45d0cd",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "packet 11",
        "func": "msg.payload = Buffer.from(\"010305510001d517\", \"hex\");\nmsg.host = flow.get(\"BYD_IP\")\nmsg.port = flow.get(\"BYD_Port\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 980,
        "wires": [
            [
                "4cff971c82389e57"
            ]
        ]
    },
    {
        "id": "d027bf5fc181d86f",
        "type": "tcp request",
        "z": "82c27bbba924f8af",
        "name": "BYD Battery",
        "server": "",
        "port": "",
        "out": "count",
        "ret": "buffer",
        "splitc": "8",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 510,
        "y": 920,
        "wires": [
            [
                "371e9355eb45d0cd"
            ]
        ]
    },
    {
        "id": "4cff971c82389e57",
        "type": "tcp request",
        "z": "82c27bbba924f8af",
        "name": "BYD Battery",
        "server": "",
        "port": "",
        "out": "count",
        "ret": "buffer",
        "splitc": "7",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 510,
        "y": 980,
        "wires": [
            [
                "46652f734941bd20"
            ]
        ]
    },
    {
        "id": "d059a48b43767c7c",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "packet 12",
        "func": "msg.payload = Buffer.from(\"01030558004104e5\", \"hex\");\nmsg.host = flow.get(\"BYD_IP\")\nmsg.port = flow.get(\"BYD_Port\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1080,
        "wires": [
            [
                "d37225b15f9b9a6f"
            ]
        ]
    },
    {
        "id": "d37225b15f9b9a6f",
        "type": "tcp request",
        "z": "82c27bbba924f8af",
        "name": "BYD Battery",
        "server": "",
        "port": "",
        "out": "count",
        "ret": "buffer",
        "splitc": "135",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 510,
        "y": 1080,
        "wires": [
            [
                "3a02a021c2f0434e",
                "7ebc21d9c3cb97b1"
            ]
        ]
    },
    {
        "id": "3a02a021c2f0434e",
        "type": "buffer-parser",
        "z": "82c27bbba924f8af",
        "name": "parse P12",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "buffer",
                "name": "data_volt",
                "offset": 101,
                "length": 32,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 710,
        "y": 1080,
        "wires": [
            [
                "bcfdf9e1cfbb7980"
            ]
        ]
    },
    {
        "id": "bcfdf9e1cfbb7980",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "process P12",
        "func": "var buffer = Buffer.from(msg.payload.data_volt)\nvar hvsBatteryVoltsperCell = [];\nhvsBatteryVoltsperCell = flow.get(\"hvsBatteryVoltsperCell\");\nconst MaxCells = 16;\nfor (let i = 0; i < MaxCells; i++) {\n   hvsBatteryVoltsperCell[i+128 +1] = ((buffer[i * 2] * 256 + buffer[i * 2 + 1]) / 1000.0);\n}\nmsg.payload = {hvsBatteryVoltsperCell};\nflow.set(\"hvsBatteryVoltsperCell\", hvsBatteryVoltsperCell);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1080,
        "wires": [
            [
                "5bf3d0ed7a700568"
            ]
        ]
    },
    {
        "id": "7ebc21d9c3cb97b1",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "packet 13",
        "func": "msg.payload = Buffer.from(\"01030558004104e5\", \"hex\");\nmsg.host = flow.get(\"BYD_IP\")\nmsg.port = flow.get(\"BYD_Port\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1160,
        "wires": [
            [
                "0032f4dd0e6689d1"
            ]
        ]
    },
    {
        "id": "59f1409d8ec76b1b",
        "type": "buffer-parser",
        "z": "82c27bbba924f8af",
        "name": "parse P13",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "buffer",
                "name": "data_volt",
                "offset": 5,
                "length": -1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 710,
        "y": 1160,
        "wires": [
            [
                "348252525a1f4f82"
            ]
        ]
    },
    {
        "id": "0032f4dd0e6689d1",
        "type": "tcp request",
        "z": "82c27bbba924f8af",
        "name": "BYD Battery",
        "server": "",
        "port": "",
        "out": "count",
        "ret": "buffer",
        "splitc": "135",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 510,
        "y": 1160,
        "wires": [
            [
                "59f1409d8ec76b1b"
            ]
        ]
    },
    {
        "id": "348252525a1f4f82",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "process P13",
        "func": "var buffer = Buffer.from(msg.payload.data_volt)\nvar hvsBatteryVoltsperCell = [];\nhvsBatteryVoltsperCell = flow.get(\"hvsBatteryVoltsperCell\");\nvar MaxCells = flow.get(\"hvsNumCells\") -128 - 16;\n// With 5 HVS Modules, only 16 cells are remaining\nif (MaxCells > 16) { MaxCells = 16; }\nfor (let i = 0; i < MaxCells; i++)\n{\n   hvsBatteryVoltsperCell[i+16+128 +1] = ((buffer[i*2]*256 + buffer[i*2+1])/1000.0);\n\n}\nmsg.payload = {hvsBatteryVoltsperCell};\nflow.set(\"hvsBatteryVoltsperCell\", hvsBatteryVoltsperCell);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1160,
        "wires": [
            [
                "a467a5a2f189c2f0"
            ]
        ]
    },
    {
        "id": "143fc8668674fdfc",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "hvsNumCells <= 128?",
        "func": "msg.payload = \"go\";\nif (flow.get(\"hvsNumCells\") <= 128) { return msg };\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 840,
        "wires": [
            [
                "b18bdf672ae7df9f"
            ]
        ]
    },
    {
        "id": "a467a5a2f189c2f0",
        "type": "change",
        "z": "82c27bbba924f8af",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1110,
        "y": 1160,
        "wires": [
            [
                "8ac2652f45468bbd"
            ]
        ]
    },
    {
        "id": "5bf3d0ed7a700568",
        "type": "debug",
        "z": "82c27bbba924f8af",
        "name": "debug 29",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 1080,
        "wires": []
    },
    {
        "id": "8725cc88defd606c",
        "type": "switch",
        "z": "82c27bbba924f8af",
        "name": "reg 0x551 bit 0 set?",
        "property": "payload[4]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 170,
        "y": 560,
        "wires": [
            [
                "0a9f875b9769ce4b"
            ],
            [
                "1d481640e8640cc0"
            ]
        ]
    },
    {
        "id": "46652f734941bd20",
        "type": "switch",
        "z": "82c27bbba924f8af",
        "name": "reg 0x551 bit 0 set?",
        "property": "payload[4]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 170,
        "y": 1040,
        "wires": [
            [
                "371e9355eb45d0cd"
            ],
            [
                "d059a48b43767c7c"
            ]
        ]
    },
    {
        "id": "f789cf254216b8d1",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "packet 1",
        "func": "msg.payload = Buffer.from(\"01030500001984cc\", \"hex\");\nmsg.host = flow.get(\"BYD_IP\")\nmsg.port = flow.get(\"BYD_Port\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1340,
        "wires": [
            [
                "652654275fdd6cc1"
            ]
        ]
    },
    {
        "id": "652654275fdd6cc1",
        "type": "tcp request",
        "z": "82c27bbba924f8af",
        "name": "BYD Battery",
        "server": "",
        "port": "",
        "out": "count",
        "ret": "buffer",
        "splitc": "55",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 490,
        "y": 1340,
        "wires": [
            [
                "41ced8af9716a513"
            ]
        ]
    },
    {
        "id": "41ced8af9716a513",
        "type": "buffer-parser",
        "z": "82c27bbba924f8af",
        "name": "parse P1",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "int16be",
                "name": "hvsSOC",
                "offset": 3,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "hvsMaxVolt",
                "offset": 5,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.01",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "hvsMinVolt",
                "offset": 7,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.01",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "hvsSOH",
                "offset": 9,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "hvsCurrent",
                "offset": 11,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.100",
                "mask": ""
            },
            {
                "type": "uint16be",
                "name": "hvsBattVolt",
                "offset": 13,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.01",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "hvsMaxTemp",
                "offset": 15,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "hvsMinTemp",
                "offset": 17,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "hvsBatTemp",
                "offset": 19,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "hvsError",
                "offset": 29,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "hvsParamT",
                "offset": 31,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.01",
                "mask": ""
            },
            {
                "type": "uint16be",
                "name": "hvsOutVolt",
                "offset": 35,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.01",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 680,
        "y": 1340,
        "wires": [
            [
                "5b53d3d21a6f9b40"
            ]
        ]
    },
    {
        "id": "5b53d3d21a6f9b40",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "process P1",
        "func": "msg.payload.hvsPower = Math.round((msg.payload.hvsCurrent * msg.payload.hvsOutVolt)* 100) / 100.0;\nmsg.payload.hvsDiffVolt = Math.round((msg.payload.hvsMaxVolt - msg.payload.hvsMinVolt) * 100) / 100;\nmsg.payload.hvsCurrent = (Math.round(msg.payload.hvsCurrent  * 100) / 100.0);\nconst myErrors = [\n    \"High Temperature Charging (Cells)\",\n    \"Low Temperature Charging (Cells)\",\n    \"Over Current Discharging\",\n    \"Over Current Charging\",\n    \"Main circuit Failure\",\n    \"Short Current Alarm\",\n    \"Cells Imbalance\",\n    \"Current Sensor Failure\",\n    \"Battery Over Voltage\",\n    \"Battery Under Voltage\",\n    \"Cell Over Voltage\",\n    \"Cell Under Voltage\",\n    \"Voltage Sensor Failure\",\n    \"Temperature Sensor Failure\",\n    \"High Temperature Discharging (Cells)\",\n    \"Low Temperature Discharging (Cells)\"\n];\nvar hvsErrorString = \"\";\n//        hvsError = 65535;\nfor (let j = 0; j < 16; j++) {\n    if (((1 << j) & msg.payload.hvsError) !== 0) {\n        if (hvsErrorString.length > 0) {\n            hvsErrorString += \"; \";\n        }\n        hvsErrorString += myErrors[j];\n    }\n}\nif (hvsErrorString.length === 0) { hvsErrorString = \"no Error\"; }\nmsg.payload.hvsErrorString = hvsErrorString;\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1340,
        "wires": [
            [
                "df2a205c1241ab6b",
                "ab1f419ae2852b66",
                "e4453df6292e60f9"
            ]
        ]
    },
    {
        "id": "ad26a8f185abbf70",
        "type": "ui_chart",
        "z": "82c27bbba924f8af",
        "name": "Min Max Volt",
        "group": "6edcf19c98e2343e",
        "order": 5,
        "width": 0,
        "height": 0,
        "label": "Minimum Cell Voltage, Maximum Cell Voltage",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "",
        "dot": false,
        "ymin": "3.2",
        "ymax": "3.65",
        "removeOlder": "4",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1270,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "df2a205c1241ab6b",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "function 2",
        "func": "var msg1= {};\nvar msg2 = {};\n/*msg1.topic = \"MinVolt\" \nmsg1.payload = msg.payload.hvsMinVolt;\nmsg2.topic= \"MaxVolt\";\nmsg2.payload= msg.payload.hvsMaxVolt;\n*/\nmsg1 = { topic: \"MinVolt\", payload: msg.payload.hvsMinVolt}\nmsg2 = { topic: \"MaxVolt\", payload: msg.payload.hvsMaxVolt }\nmsg = [msg1,msg2]\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1340,
        "wires": [
            [
                "ad26a8f185abbf70"
            ],
            [
                "ad26a8f185abbf70"
            ]
        ]
    },
    {
        "id": "d3d8c121b1304e13",
        "type": "inject",
        "z": "82c27bbba924f8af",
        "name": "General Batt info",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 1340,
        "wires": [
            [
                "f789cf254216b8d1"
            ]
        ]
    },
    {
        "id": "ab1f419ae2852b66",
        "type": "debug",
        "z": "82c27bbba924f8af",
        "name": "debug 30",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 1400,
        "wires": []
    },
    {
        "id": "e4453df6292e60f9",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "function 3",
        "func": "var msg1= {};\nvar msg2 = {};\nvar msg3 = {};\nvar msg4 = {};\nvar bydbatchargeW = 0;\nvar bydbatdischargeW = 0;\n\nflow.set(\"BYD_Power\", msg.payload.hvsPower )\nmsg1 = { topic: \"Battery power BYD\", payload: msg.payload.hvsPower}\nmsg2 = { topic: \"Battery power SMA\", payload: flow.get(\"Power_SMA\") }\nmsg3 = { topic: \"AC power SMA\", payload: flow.get(\"AC_power_SMA\")}\nmsg4.topic = \"power-stats\"\n\nif (msg.payload.hvsPower > 0)\n{\n    bydbatchargeW = 0;\n    bydbatdischargeW = msg.payload.hvsPower\n}\nelse{\n    bydbatchargeW = msg.payload.hvsPower * -1.0\n    bydbatdischargeW = 0;\n}\nmsg4.payload = {bydbatchargeW,bydbatdischargeW}\nmsg = [msg1,msg2,msg3,msg4]\nreturn msg;",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1460,
        "wires": [
            [
                "e873895a57452637",
                "3c3322892b1be3ca"
            ],
            [
                "e873895a57452637",
                "3c3322892b1be3ca"
            ],
            [
                "3c3322892b1be3ca"
            ],
            [
                "01c8d7abb60e5aba",
                "d1fee9cd64f34271"
            ]
        ]
    },
    {
        "id": "44f1c4c24d9a896b",
        "type": "delay",
        "z": "82c27bbba924f8af",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 410,
        "y": 1260,
        "wires": [
            [
                "f789cf254216b8d1"
            ]
        ]
    },
    {
        "id": "b0f92e848e26cfd3",
        "type": "link in",
        "z": "82c27bbba924f8af",
        "name": "link from SMA trigger",
        "links": [
            "f15c2f4bf5a17036"
        ],
        "x": 195,
        "y": 1260,
        "wires": [
            [
                "44f1c4c24d9a896b"
            ]
        ]
    },
    {
        "id": "0de0d489454a0677",
        "type": "link in",
        "z": "82c27bbba924f8af",
        "name": "link in 2",
        "links": [
            "d813fbb730aaac4b"
        ],
        "x": 705,
        "y": 1640,
        "wires": [
            [
                "4a29501d6eb73300"
            ]
        ]
    },
    {
        "id": "e873895a57452637",
        "type": "debug",
        "z": "82c27bbba924f8af",
        "name": "debug 57",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 1540,
        "wires": []
    },
    {
        "id": "183187e8a86ec9a6",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "function 16",
        "func": "flow.set(\"Power_SMA\", msg.payload.batdischargeW - msg.payload.batchargeW)\nflow.set(\"AC_power_SMA\",msg.payload.inverterW)\nmsg.payload = (msg.payload.batdischargeW - msg.payload.batchargeW) - flow.get(\"BYD_Power\")\nmsg.topic = \"power difference\"\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1640,
        "wires": [
            [
                "4940225a74755d77",
                "1034ae8b63ca4697"
            ]
        ]
    },
    {
        "id": "1034ae8b63ca4697",
        "type": "ui_chart",
        "z": "82c27bbba924f8af",
        "name": "Power difference SMA-BYD",
        "group": "6edcf19c98e2343e",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "Battery power difference SMA-BYD",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "",
        "dot": false,
        "ymin": "-200",
        "ymax": "200",
        "removeOlder": "4",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1320,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "4940225a74755d77",
        "type": "debug",
        "z": "82c27bbba924f8af",
        "name": "debug 58",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 1700,
        "wires": []
    },
    {
        "id": "4a29501d6eb73300",
        "type": "delay",
        "z": "82c27bbba924f8af",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 870,
        "y": 1640,
        "wires": [
            [
                "183187e8a86ec9a6"
            ]
        ]
    },
    {
        "id": "3c3322892b1be3ca",
        "type": "ui_chart",
        "z": "82c27bbba924f8af",
        "name": "Battery power",
        "group": "6edcf19c98e2343e",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "Battery power",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#ff0000",
            "#00ff00",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1320,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "01c8d7abb60e5aba",
        "type": "debug",
        "z": "82c27bbba924f8af",
        "name": "debug 61",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 1560,
        "wires": []
    },
    {
        "id": "d1fee9cd64f34271",
        "type": "influxdb out",
        "z": "82c27bbba924f8af",
        "influxdb": "1ab063217b34dd11",
        "name": "PV_Anlage Leistungs",
        "measurement": "power-stats",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "ade3c88ba6f6690e",
        "bucket": "PV-Anlage",
        "x": 1320,
        "y": 1580,
        "wires": []
    },
    {
        "id": "735efb4294cfcbf4",
        "type": "inject",
        "z": "82c27bbba924f8af",
        "name": "Cells info stack 2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "turm2",
        "payloadType": "str",
        "x": 140,
        "y": 460,
        "wires": [
            [
                "06072ae38d2a5c80"
            ]
        ]
    },
    {
        "id": "f4d10a3998c7daa7",
        "type": "inject",
        "z": "82c27bbba924f8af",
        "name": "initiate variables",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 60,
        "wires": [
            [
                "d77e802df1310c4e"
            ]
        ]
    },
    {
        "id": "d77e802df1310c4e",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "define your BYD IP & Port here",
        "func": "flow.set(\"BYD_IP\", \"192.168.1.82\");\nflow.set(\"BYD_Port\", \"8080\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "4c99630f70611c66",
        "type": "inject",
        "z": "82c27bbba924f8af",
        "name": "Cells info stack 3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "turm3",
        "payloadType": "str",
        "x": 140,
        "y": 500,
        "wires": [
            [
                "06072ae38d2a5c80"
            ]
        ]
    },
    {
        "id": "b32393d064601f44",
        "type": "ui_spacer",
        "z": "82c27bbba924f8af",
        "name": "spacer",
        "group": "6edcf19c98e2343e",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "1e36ce99e1747de9",
        "type": "ui_spacer",
        "z": "82c27bbba924f8af",
        "name": "spacer",
        "group": "6edcf19c98e2343e",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "6edcf19c98e2343e",
        "type": "ui_group",
        "name": "Photovoltaik",
        "tab": "319b6e6c8be4fe25",
        "order": 1,
        "disp": true,
        "width": "14",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1ab063217b34dd11",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "Influxdb2_PV",
        "usetls": false,
        "tls": "d50d0c9f.31e858",
        "influxdbVersion": "2.0",
        "url": "http://192.168.1.49:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "319b6e6c8be4fe25",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": ""
    },
    {
        "id": "d50d0c9f.31e858",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    }
]