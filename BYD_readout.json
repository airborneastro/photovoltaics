[
    {
        "id": "c1bf54aba015a59c",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "packet 1",
        "func": "msg.payload = Buffer.from(\"01030500001984cc\", \"hex\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 140,
        "wires": [
            [
                "dff508b083adf076"
            ]
        ]
    },
    {
        "id": "dff508b083adf076",
        "type": "tcp request",
        "z": "82c27bbba924f8af",
        "name": "BYD Battery",
        "server": "192.168.1.82",
        "port": "8080",
        "out": "count",
        "ret": "buffer",
        "splitc": "55",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 490,
        "y": 140,
        "wires": [
            [
                "73faaa497ab29bb4",
                "bdc2393d72ae0913"
            ]
        ]
    },
    {
        "id": "73faaa497ab29bb4",
        "type": "buffer-parser",
        "z": "82c27bbba924f8af",
        "name": "parse P1",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "int16be",
                "name": "hvsSOC",
                "offset": 3,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "hvsMaxVolt",
                "offset": 5,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.01",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "hvsMinVolt",
                "offset": 7,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.01",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "hvsSOH",
                "offset": 9,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "hvsCurrent",
                "offset": 11,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.100",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "hvsBattVolt",
                "offset": 13,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.01",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "hvsMaxTemp",
                "offset": 15,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "hvsMinTemp",
                "offset": 17,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "hvsBatTemp",
                "offset": 19,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "hvsError",
                "offset": 29,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "hvsParamT",
                "offset": 31,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.01",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "hvsOutVolt",
                "offset": 35,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.01",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 680,
        "y": 140,
        "wires": [
            [
                "98b2fd36fec341e1"
            ]
        ]
    },
    {
        "id": "98b2fd36fec341e1",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "process P1",
        "func": "msg.payload.hvsPower = Math.round((msg.payload.hvsCurrent * msg.payload.hvsOutVolt)* 100) / 100.0;\nmsg.payload.hvsDiffVolt = Math.round((msg.payload.hvsMaxVolt - msg.payload.hvsMinVolt) * 100) / 100;\nmsg.payload.hvsCurrent = (Math.round(msg.payload.hvsCurrent  * 100) / 100.0);\nconst myErrors = [\n    \"High Temperature Charging (Cells)\",\n    \"Low Temperature Charging (Cells)\",\n    \"Over Current Discharging\",\n    \"Over Current Charging\",\n    \"Main circuit Failure\",\n    \"Short Current Alarm\",\n    \"Cells Imbalance\",\n    \"Current Sensor Failure\",\n    \"Battery Over Voltage\",\n    \"Battery Under Voltage\",\n    \"Cell Over Voltage\",\n    \"Cell Under Voltage\",\n    \"Voltage Sensor Failure\",\n    \"Temperature Sensor Failure\",\n    \"High Temperature Discharging (Cells)\",\n    \"Low Temperature Discharging (Cells)\"\n];\nvar hvsErrorString = \"\";\n//        hvsError = 65535;\nfor (let j = 0; j < 16; j++) {\n    if (((1 << j) & msg.payload.hvsError) !== 0) {\n        if (hvsErrorString.length > 0) {\n            hvsErrorString += \"; \";\n        }\n        hvsErrorString += myErrors[j];\n    }\n}\nif (hvsErrorString.length === 0) { hvsErrorString = \"no Error\"; }\nmsg.payload.hvsErrorString = hvsErrorString;\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 140,
        "wires": [
            [
                "e98905333cf9357f"
            ]
        ]
    },
    {
        "id": "e98905333cf9357f",
        "type": "debug",
        "z": "82c27bbba924f8af",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 140,
        "wires": []
    },
    {
        "id": "9498d319785b66ef",
        "type": "inject",
        "z": "82c27bbba924f8af",
        "name": "General Batt info",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "88919198f87fa0b3"
            ]
        ]
    },
    {
        "id": "88919198f87fa0b3",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "packet 0",
        "func": "msg.payload = Buffer.from(\"010300000066c5e0\", \"hex\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 60,
        "wires": [
            [
                "84f97cc19e86d7ea"
            ]
        ]
    },
    {
        "id": "6ddfbf8d464ec2a0",
        "type": "buffer-parser",
        "z": "82c27bbba924f8af",
        "name": "parse P0",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "string",
                "name": "SerialNo",
                "offset": 3,
                "length": 19,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint8",
                "name": "hvsBattType_fromSerial",
                "offset": 5,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint8",
                "name": "hvsBMUA_u",
                "offset": 27,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint8",
                "name": "hvsBMUA_l",
                "offset": 28,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint8",
                "name": "hvsBMUB_u",
                "offset": 29,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint8",
                "name": "hvsBMUB_l",
                "offset": 30,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint8",
                "name": "hvsBMS_u",
                "offset": 31,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint8",
                "name": "hvsBMS_l",
                "offset": 32,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint8",
                "name": "hvsModules",
                "offset": 36,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint8",
                "name": "hvsGrid",
                "offset": 38,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 680,
        "y": 60,
        "wires": [
            [
                "711d755660a625ab"
            ]
        ]
    },
    {
        "id": "84f97cc19e86d7ea",
        "type": "tcp request",
        "z": "82c27bbba924f8af",
        "name": "BYD Battery",
        "server": "192.168.1.82",
        "port": "8080",
        "out": "count",
        "ret": "buffer",
        "splitc": "207",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 490,
        "y": 60,
        "wires": [
            [
                "6ddfbf8d464ec2a0",
                "c1bf54aba015a59c"
            ]
        ]
    },
    {
        "id": "f74706ec709b68d7",
        "type": "debug",
        "z": "82c27bbba924f8af",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 60,
        "wires": []
    },
    {
        "id": "711d755660a625ab",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "process P0",
        "func": "msg.payload.hvsBMUA = \"V\" + msg.payload.hvsBMUA_u.toString() + \".\" + msg.payload.hvsBMUA_l.toString();\nmsg.payload.hvsBMUB = \"V\" + msg.payload.hvsBMUB_u.toString() + \".\" + msg.payload.hvsBMUB_l.toString();\nmsg.payload.hvsBMS = \"V\" + msg.payload.hvsBMS_u.toString() + \".\" + msg.payload.hvsBMS_l.toString(); \nmsg.payload.hvsModules = (msg.payload.hvsModules -16);\nflow.set(\"hvsModules\", msg.payload.hvsModules);\nswitch  (msg.payload.hvsGrid)\n{\n    case 0:\n        msg.payload.hvsGrid = \"OffGrid\"\n        break;\n    case 1:\n        msg.payload.hvsGrid = \"OnGrid\"\n        break;\n    case 2:\n        msg.payload.hvsGrid = \"OffGrid\"\n}\nflow.set(\"hvsBattType_fromSerial\", msg.payload.hvsBattType_fromSerial);\n \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 60,
        "wires": [
            [
                "f74706ec709b68d7"
            ]
        ]
    },
    {
        "id": "1d481640e8640cc0",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "packet 5",
        "func": "msg.payload = Buffer.from(\"01030558004104e5\", \"hex\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 480,
        "wires": [
            [
                "7cb3cff9e167e039"
            ]
        ]
    },
    {
        "id": "7cb3cff9e167e039",
        "type": "tcp request",
        "z": "82c27bbba924f8af",
        "name": "BYD Battery",
        "server": "192.168.1.82",
        "port": "8080",
        "out": "count",
        "ret": "buffer",
        "splitc": "135",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 490,
        "y": 480,
        "wires": [
            [
                "44e44acc783bb4c5",
                "8acd9b92b488f664"
            ]
        ]
    },
    {
        "id": "0a9f875b9769ce4b",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "packet 4",
        "func": "msg.payload = Buffer.from(\"010305510001d517\", \"hex\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 380,
        "wires": [
            [
                "e76d1996868897fe"
            ]
        ]
    },
    {
        "id": "e76d1996868897fe",
        "type": "tcp request",
        "z": "82c27bbba924f8af",
        "name": "BYD Battery",
        "server": "192.168.1.82",
        "port": "8080",
        "out": "count",
        "ret": "buffer",
        "splitc": "7",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 490,
        "y": 380,
        "wires": [
            [
                "8725cc88defd606c"
            ]
        ]
    },
    {
        "id": "d3e243abacb391a0",
        "type": "inject",
        "z": "82c27bbba924f8af",
        "name": "Cells info stack 1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "turm1",
        "payloadType": "str",
        "x": 140,
        "y": 320,
        "wires": [
            [
                "06072ae38d2a5c80"
            ]
        ]
    },
    {
        "id": "06072ae38d2a5c80",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "packet 3",
        "func": "if (msg.payload == \"turm1\") {\n    msg.payload = Buffer.from(\"0110055000020400018100f853\", \"hex\");\n} \nelse {\n    msg.payload = Buffer.from(\"01100550000204000281000853\", \"hex\");\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 320,
        "wires": [
            [
                "e2a1fe601f4a4345"
            ]
        ]
    },
    {
        "id": "e2a1fe601f4a4345",
        "type": "tcp request",
        "z": "82c27bbba924f8af",
        "name": "BYD Battery",
        "server": "192.168.1.82",
        "port": "8080",
        "out": "count",
        "ret": "buffer",
        "splitc": "8",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 490,
        "y": 320,
        "wires": [
            [
                "0a9f875b9769ce4b"
            ]
        ]
    },
    {
        "id": "44e44acc783bb4c5",
        "type": "buffer-parser",
        "z": "82c27bbba924f8af",
        "name": "parse P5",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "int16be",
                "name": "hvsMaxmVolt",
                "offset": 5,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.001",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "hvsMinmVolt",
                "offset": 7,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.001",
                "mask": ""
            },
            {
                "type": "uint8",
                "name": "hvsMaxmVoltCell",
                "offset": 9,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint8",
                "name": "hvsMinmVoltCell",
                "offset": 10,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint8",
                "name": "hvsMaxTempCell",
                "offset": 15,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint8",
                "name": "hvsMinTempCell",
                "offset": 16,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "hvsSOCDiagnosis",
                "offset": 53,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.1",
                "mask": ""
            },
            {
                "type": "buffer",
                "name": "data_volt",
                "offset": 101,
                "length": 32,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 680,
        "y": 480,
        "wires": [
            [
                "eb12f357e462128e",
                "ba469c6dc623a60f"
            ]
        ]
    },
    {
        "id": "8c87e81202a82f2d",
        "type": "debug",
        "z": "82c27bbba924f8af",
        "name": "debug 21",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 480,
        "wires": []
    },
    {
        "id": "eb12f357e462128e",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "process P5",
        "func": "var buffer = Buffer.from(msg.payload.data_volt)\nvar hvsBatteryVoltsperCell = [];\nconst MaxCells = 16;\n//hvsBatteryVoltsperCell[0]=0; //BYD counts from 1\nfor (let i = 0; i < MaxCells; i++)\n{\n   hvsBatteryVoltsperCell[i+1] = ((buffer[i*2]*256 + buffer[i*2+1])/1000.0);\n}\nmsg.payload = {hvsBatteryVoltsperCell };\nflow.set(\"hvsBatteryVoltsperCell\", hvsBatteryVoltsperCell);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 480,
        "wires": [
            [
                "8c87e81202a82f2d"
            ]
        ]
    },
    {
        "id": "bdc2393d72ae0913",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "packet 2",
        "func": "msg.payload = Buffer.from(\"010300100003040e\", \"hex\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 220,
        "wires": [
            [
                "e2b212df0636c8aa"
            ]
        ]
    },
    {
        "id": "e2b212df0636c8aa",
        "type": "tcp request",
        "z": "82c27bbba924f8af",
        "name": "BYD Battery",
        "server": "192.168.1.82",
        "port": "8080",
        "out": "count",
        "ret": "buffer",
        "splitc": "11",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 490,
        "y": 220,
        "wires": [
            [
                "1d668c13834f5bef"
            ]
        ]
    },
    {
        "id": "1d668c13834f5bef",
        "type": "buffer-parser",
        "z": "82c27bbba924f8af",
        "name": "parse P2",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "uint8",
                "name": "hvsInvType",
                "offset": 3,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint8",
                "name": "hvsBattType",
                "offset": 5,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 680,
        "y": 220,
        "wires": [
            [
                "6895aebc3bec5ac5"
            ]
        ]
    },
    {
        "id": "6c1fe81bd54cbe09",
        "type": "debug",
        "z": "82c27bbba924f8af",
        "name": "debug 22",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 220,
        "wires": []
    },
    {
        "id": "6895aebc3bec5ac5",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "process P2",
        "func": "var NumCells = 0;\nvar NumTemps = 0;\nconst myINVs = [\n    \"Fronius HV\", //0\n    \"Goodwe HV\", //1\n    \"Fronius HV\", //2\n    \"Kostal HV\", //3\n    \"Goodwe HV\",  //4\n    \"SMA SBS3.7/5.0\", //5\n    \"Kostal HV\", //6\n    \"SMA SBS3.7/5.0\",  //7\n    \"Sungrow HV\", //8\n    \"Sungrow HV\", //9\n    \"Kaco HV\", //10\n    \"Kaco HV\", //11\n    \"Ingeteam HV\", //12\n    \"Ingeteam HV\", //13\n    \"SMA SBS 2.5 HV\", //14\n    \"undefined\", //15\n    \"SMA SBS 2.5 HV\", //16\n    \"Fronius HV\", //17\n    \"undefined\", //18\n    \"SMA STP\"  //19\n];\nconst myINVsLVS = [\n    \"Fronius HV\",\n    \"Goodwe HV\",\n    \"Goodwe HV\",\n    \"Kostal HV\",\n    \"Selectronic LV\",\n    \"SMA SBS3.7/5.0\",\n    \"SMA LV\",\n    \"Victron LV\",\n    \"Suntech LV\",\n    \"Sungrow HV\",\n    \"Kaco HV\",\n    \"Studer LV\",\n    \"Solar Edge LV\",\n    \"Ingeteam HV\",\n    \"Sungrow LV\",\n    \"Schneider LV\",\n    \"SMA SBS2.5 HV\",\n    \"Solar Edge LV\",\n    \"Solar Edge LV\",\n    \"Solar Edge LV\",\n    \"unknown\"\n];\nswitch (msg.payload.hvsBattType) {\n    case 0:\n        break;\n    case 1: //HVM 16 Cells per module\n        NumCells = flow.get(\"hvsModules\") * 16;\n        NumTemps = flow.get(\"hvsModules\") * 8\n        break;\n    case 2: //HVS 32 cells per module\n        NumCells = flow.get(\"hvsModules\") * 32;\n        NumTemps = flow.get(\"hvsModules\") * 12;\n}  \nif ((flow.get(\"hvsBattType_fromSerial\") === 49) || (flow.get(\"hvsBattType_fromSerial\") === 50))\n    {NumCells = flow.get(\"hvsModules\") * 7;\n     NumTemps = 0}\nif (NumCells > 160) {NumCells = 160};\nif (NumTemps > 64) {NumTemps = 64\n}\nvar Battype = flow.get(\"hvsBattType_fromSerial\")\nflow.set(\"hvsNumCells\",NumCells);\nflow.set(\"hvsNumTemps\",NumTemps);\nflow.get(\"hvsBattType_fromSerial\")\nif ((Battype == 49) || (Battype == 50)) { //unterschiedliche WR-Tabelle je nach Batt-Typ\n    msg.payload.hvsInverter = myINVsLVS[msg.payload.hvsInvType];\n}\nelse {\n    msg.payload.hvsInverter = myINVs[msg.payload.hvsInvType];\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 220,
        "wires": [
            [
                "6c1fe81bd54cbe09"
            ]
        ]
    },
    {
        "id": "8acd9b92b488f664",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "packet 6",
        "func": "msg.payload = Buffer.from(\"01030558004104e5\", \"hex\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 540,
        "wires": [
            [
                "ab919006df0f72ce"
            ]
        ]
    },
    {
        "id": "ab919006df0f72ce",
        "type": "tcp request",
        "z": "82c27bbba924f8af",
        "name": "BYD Battery",
        "server": "192.168.1.82",
        "port": "8080",
        "out": "count",
        "ret": "buffer",
        "splitc": "135",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 490,
        "y": 540,
        "wires": [
            [
                "7d6724f442bbc926",
                "e7bdfaac86ba5bec"
            ]
        ]
    },
    {
        "id": "7d6724f442bbc926",
        "type": "buffer-parser",
        "z": "82c27bbba924f8af",
        "name": "parse P6",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "buffer",
                "name": "data_volt",
                "offset": 5,
                "length": -1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 680,
        "y": 540,
        "wires": [
            [
                "2e3cac6546d4cd0a"
            ]
        ]
    },
    {
        "id": "2e3cac6546d4cd0a",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "process P6",
        "func": "var buffer = Buffer.from(msg.payload.data_volt)\nvar hvsBatteryVoltsperCell = [];\nhvsBatteryVoltsperCell = flow.get(\"hvsBatteryVoltsperCell\");\nvar MaxCells = flow.get(\"hvsNumCells\") - 16;\nif (MaxCells > 64) { MaxCells = 64; }\nfor (let i = 0; i < MaxCells; i++)\n{\n   hvsBatteryVoltsperCell[i+16+1] = ((buffer[i*2]*256 + buffer[i*2+1])/1000.0);\n\n}\nmsg.payload = {hvsBatteryVoltsperCell};\nflow.set(\"hvsBatteryVoltsperCell\", hvsBatteryVoltsperCell);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 540,
        "wires": [
            [
                "e22cc9dc4789878c"
            ]
        ]
    },
    {
        "id": "e22cc9dc4789878c",
        "type": "debug",
        "z": "82c27bbba924f8af",
        "name": "debug 24",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 540,
        "wires": []
    },
    {
        "id": "e7bdfaac86ba5bec",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "packet 7",
        "func": "msg.payload = Buffer.from(\"01030558004104e5\", \"hex\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 600,
        "wires": [
            [
                "221f4686a5bc4096"
            ]
        ]
    },
    {
        "id": "221f4686a5bc4096",
        "type": "tcp request",
        "z": "82c27bbba924f8af",
        "name": "BYD Battery",
        "server": "192.168.1.82",
        "port": "8080",
        "out": "count",
        "ret": "buffer",
        "splitc": "135",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 490,
        "y": 600,
        "wires": [
            [
                "a9354e6ad9a7211d",
                "323554b6efed8c17"
            ]
        ]
    },
    {
        "id": "a9354e6ad9a7211d",
        "type": "buffer-parser",
        "z": "82c27bbba924f8af",
        "name": "parse P7",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "buffer",
                "name": "data_volt",
                "offset": 5,
                "length": 96,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "buffer",
                "name": "data_temp",
                "offset": 103,
                "length": 30,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 680,
        "y": 600,
        "wires": [
            [
                "250287bc5c50d9d4"
            ]
        ]
    },
    {
        "id": "250287bc5c50d9d4",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "process P7",
        "func": "var buffer = Buffer.from(msg.payload.data_volt)\nvar hvsBatteryVoltsperCell = [];\nvar hvsBatteryTempperCell = [];\nhvsBatteryVoltsperCell = flow.get(\"hvsBatteryVoltsperCell\");\nvar MaxCells = flow.get(\"hvsNumCells\") - 80;\nif (MaxCells > 48) { MaxCells = 48; }\nfor (let i = 0; i < MaxCells; i++)\n{\n   hvsBatteryVoltsperCell[i+80+1] = ((buffer[i*2]*256 + buffer[i*2+1])/1000.0);\n}\nbuffer = Buffer.from(msg.payload.data_temp);\n//hvsBatteryTempperCell[0]=0; //BYD counts from 1\nvar MaxTemps = flow.get(\"hvsNumTemps\");\nif (MaxTemps > 30) { MaxTemps = 30; }\nfor (let i = 0; i < MaxTemps; i++) {\n   hvsBatteryTempperCell[i+1] = buffer[i];\n}\n//hvsBatteryTempperCell = msg.payload.data_temp;\nmsg.payload = { hvsBatteryVoltsperCell, hvsBatteryTempperCell };\nflow.set(\"hvsBatteryVoltsperCell\", hvsBatteryVoltsperCell);\nflow.set(\"hvsBatteryTempperCell\", hvsBatteryTempperCell)\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 600,
        "wires": [
            [
                "0431407c362f6876"
            ]
        ]
    },
    {
        "id": "0431407c362f6876",
        "type": "debug",
        "z": "82c27bbba924f8af",
        "name": "debug 25",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 600,
        "wires": []
    },
    {
        "id": "323554b6efed8c17",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "packet 8",
        "func": "msg.payload = Buffer.from(\"01030558004104e5\", \"hex\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 660,
        "wires": [
            [
                "af8ac899a3cb7afe"
            ]
        ]
    },
    {
        "id": "af8ac899a3cb7afe",
        "type": "tcp request",
        "z": "82c27bbba924f8af",
        "name": "BYD Battery",
        "server": "192.168.1.82",
        "port": "8080",
        "out": "count",
        "ret": "buffer",
        "splitc": "135",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 490,
        "y": 660,
        "wires": [
            [
                "d6254bdf65160673",
                "7c906444615bd2f2"
            ]
        ]
    },
    {
        "id": "d6254bdf65160673",
        "type": "buffer-parser",
        "z": "82c27bbba924f8af",
        "name": "parse P8",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "buffer",
                "name": "data_temp",
                "offset": 5,
                "length": -1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 680,
        "y": 660,
        "wires": [
            [
                "3041d68fbcb15582"
            ]
        ]
    },
    {
        "id": "3041d68fbcb15582",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "process P8",
        "func": "var buffer = Buffer.from(msg.payload.data_temp)\nvar hvsBatteryTempperCell = [];\nvar hvsBatteryVoltsperCell = [];\nhvsBatteryVoltsperCell = flow.get(\"hvsBatteryVoltsperCell\");\nhvsBatteryTempperCell = flow.get(\"hvsBatteryTempperCell\");\nbuffer = Buffer.from(msg.payload.data_temp);\nvar MaxTemps = flow.get(\"hvsNumTemps\") -30;\nif (MaxTemps > 34) { MaxTemps = 34; }\nfor (let i = 0; i < MaxTemps; i++) {\n   hvsBatteryTempperCell[i+30+1] = buffer[i];\n}\nmsg.payload = { hvsBatteryVoltsperCell, hvsBatteryTempperCell };\nflow.set(\"hvsBatteryVoltsperCell\", hvsBatteryVoltsperCell);\nflow.set(\"hvsBatteryTempperCell\", hvsBatteryTempperCell)\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 660,
        "wires": [
            [
                "2d00c17f885f345b",
                "8ac2652f45468bbd",
                "143fc8668674fdfc"
            ]
        ]
    },
    {
        "id": "2d00c17f885f345b",
        "type": "debug",
        "z": "82c27bbba924f8af",
        "name": "debug 26",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 660,
        "wires": []
    },
    {
        "id": "8c0a926b81e92c0d",
        "type": "debug",
        "z": "82c27bbba924f8af",
        "name": "debug 27",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 420,
        "wires": []
    },
    {
        "id": "ba469c6dc623a60f",
        "type": "change",
        "z": "82c27bbba924f8af",
        "name": "without voltage data",
        "rules": [
            {
                "t": "delete",
                "p": "payload.data_volt",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 420,
        "wires": [
            [
                "8c0a926b81e92c0d",
                "8ac2652f45468bbd"
            ]
        ]
    },
    {
        "id": "8ac2652f45468bbd",
        "type": "join",
        "z": "82c27bbba924f8af",
        "name": "",
        "mode": "custom",
        "build": "merged",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1290,
        "y": 560,
        "wires": [
            [
                "eb3659071c954ab0"
            ]
        ]
    },
    {
        "id": "eb3659071c954ab0",
        "type": "debug",
        "z": "82c27bbba924f8af",
        "name": "Final result cells info",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1460,
        "y": 560,
        "wires": []
    },
    {
        "id": "b18bdf672ae7df9f",
        "type": "change",
        "z": "82c27bbba924f8af",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1090,
        "y": 720,
        "wires": [
            [
                "8ac2652f45468bbd"
            ]
        ]
    },
    {
        "id": "321f49e790f9ebbb",
        "type": "comment",
        "z": "82c27bbba924f8af",
        "name": "README, be warned",
        "info": "\"General Batt info\" has to run once before reading cells data.\nIt is unclear if calling \"Cells info\" too often causes harm.\nYou are on your own risk!\nGeneral Batt info could probably polled regularly",
        "x": 140,
        "y": 260,
        "wires": []
    },
    {
        "id": "7c906444615bd2f2",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "hvsNumCells > 128?",
        "func": "msg.payload = Buffer.from(\"01100100000306444542554700176f\", \"hex\");\nif (flow.get(\"hvsNumCells\") > 128)\n    {return msg}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 740,
        "wires": [
            [
                "eb394f6deb99a8a0"
            ]
        ]
    },
    {
        "id": "eb394f6deb99a8a0",
        "type": "tcp request",
        "z": "82c27bbba924f8af",
        "name": "BYD Battery",
        "server": "192.168.1.82",
        "port": "8080",
        "out": "count",
        "ret": "buffer",
        "splitc": "8",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 490,
        "y": 740,
        "wires": [
            [
                "9074e997325bd75a"
            ]
        ]
    },
    {
        "id": "9074e997325bd75a",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "packet 10",
        "func": "msg.payload = Buffer.from(\"0110055000020400018100f853\", \"hex\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 800,
        "wires": [
            [
                "d027bf5fc181d86f"
            ]
        ]
    },
    {
        "id": "371e9355eb45d0cd",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "packet 11",
        "func": "msg.payload = Buffer.from(\"010305510001d517\", \"hex\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 860,
        "wires": [
            [
                "4cff971c82389e57"
            ]
        ]
    },
    {
        "id": "d027bf5fc181d86f",
        "type": "tcp request",
        "z": "82c27bbba924f8af",
        "name": "BYD Battery",
        "server": "192.168.1.82",
        "port": "8080",
        "out": "count",
        "ret": "buffer",
        "splitc": "8",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 490,
        "y": 800,
        "wires": [
            [
                "371e9355eb45d0cd"
            ]
        ]
    },
    {
        "id": "4cff971c82389e57",
        "type": "tcp request",
        "z": "82c27bbba924f8af",
        "name": "BYD Battery",
        "server": "192.168.1.82",
        "port": "8080",
        "out": "count",
        "ret": "buffer",
        "splitc": "7",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 490,
        "y": 860,
        "wires": [
            [
                "46652f734941bd20"
            ]
        ]
    },
    {
        "id": "d059a48b43767c7c",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "packet 12",
        "func": "msg.payload = Buffer.from(\"01030558004104e5\", \"hex\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 960,
        "wires": [
            [
                "d37225b15f9b9a6f"
            ]
        ]
    },
    {
        "id": "d37225b15f9b9a6f",
        "type": "tcp request",
        "z": "82c27bbba924f8af",
        "name": "BYD Battery",
        "server": "192.168.1.82",
        "port": "8080",
        "out": "count",
        "ret": "buffer",
        "splitc": "135",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 490,
        "y": 960,
        "wires": [
            [
                "3a02a021c2f0434e",
                "7ebc21d9c3cb97b1"
            ]
        ]
    },
    {
        "id": "3a02a021c2f0434e",
        "type": "buffer-parser",
        "z": "82c27bbba924f8af",
        "name": "parse P12",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "buffer",
                "name": "data_volt",
                "offset": 101,
                "length": 32,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 690,
        "y": 960,
        "wires": [
            [
                "bcfdf9e1cfbb7980"
            ]
        ]
    },
    {
        "id": "bcfdf9e1cfbb7980",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "process P12",
        "func": "var buffer = Buffer.from(msg.payload.data_volt)\nvar hvsBatteryVoltsperCell = [];\nhvsBatteryVoltsperCell = flow.get(\"hvsBatteryVoltsperCell\");\nconst MaxCells = 16;\nfor (let i = 0; i < MaxCells; i++) {\n   hvsBatteryVoltsperCell[i+128 +1] = ((buffer[i * 2] * 256 + buffer[i * 2 + 1]) / 1000.0);\n}\nmsg.payload = {hvsBatteryVoltsperCell};\nflow.set(\"hvsBatteryVoltsperCell\", hvsBatteryVoltsperCell);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 960,
        "wires": [
            [
                "5bf3d0ed7a700568"
            ]
        ]
    },
    {
        "id": "7ebc21d9c3cb97b1",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "packet 13",
        "func": "msg.payload = Buffer.from(\"01030558004104e5\", \"hex\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1040,
        "wires": [
            [
                "0032f4dd0e6689d1"
            ]
        ]
    },
    {
        "id": "59f1409d8ec76b1b",
        "type": "buffer-parser",
        "z": "82c27bbba924f8af",
        "name": "parse P13",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "buffer",
                "name": "data_volt",
                "offset": 5,
                "length": -1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 690,
        "y": 1040,
        "wires": [
            [
                "348252525a1f4f82"
            ]
        ]
    },
    {
        "id": "0032f4dd0e6689d1",
        "type": "tcp request",
        "z": "82c27bbba924f8af",
        "name": "BYD Battery",
        "server": "192.168.1.82",
        "port": "8080",
        "out": "count",
        "ret": "buffer",
        "splitc": "135",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 490,
        "y": 1040,
        "wires": [
            [
                "59f1409d8ec76b1b"
            ]
        ]
    },
    {
        "id": "348252525a1f4f82",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "process P13",
        "func": "var buffer = Buffer.from(msg.payload.data_volt)\nvar hvsBatteryVoltsperCell = [];\nhvsBatteryVoltsperCell = flow.get(\"hvsBatteryVoltsperCell\");\nvar MaxCells = flow.get(\"hvsNumCells\") -128 - 16;\n// With 5 HVS Modules, only 16 cells are remaining\nif (MaxCells > 16) { MaxCells = 16; }\nfor (let i = 0; i < MaxCells; i++)\n{\n   hvsBatteryVoltsperCell[i+16+128 +1] = ((buffer[i*2]*256 + buffer[i*2+1])/1000.0);\n\n}\nmsg.payload = {hvsBatteryVoltsperCell};\nflow.set(\"hvsBatteryVoltsperCell\", hvsBatteryVoltsperCell);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1040,
        "wires": [
            [
                "a467a5a2f189c2f0"
            ]
        ]
    },
    {
        "id": "143fc8668674fdfc",
        "type": "function",
        "z": "82c27bbba924f8af",
        "name": "hvsNumCells <= 128?",
        "func": "msg.payload = \"go\";\nif (flow.get(\"hvsNumCells\") <= 128) { return msg };\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 720,
        "wires": [
            [
                "b18bdf672ae7df9f"
            ]
        ]
    },
    {
        "id": "a467a5a2f189c2f0",
        "type": "change",
        "z": "82c27bbba924f8af",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1090,
        "y": 1040,
        "wires": [
            [
                "8ac2652f45468bbd"
            ]
        ]
    },
    {
        "id": "5bf3d0ed7a700568",
        "type": "debug",
        "z": "82c27bbba924f8af",
        "name": "debug 29",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 960,
        "wires": []
    },
    {
        "id": "8725cc88defd606c",
        "type": "switch",
        "z": "82c27bbba924f8af",
        "name": "reg 0x551 bit 0 set?",
        "property": "payload[4]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 150,
        "y": 440,
        "wires": [
            [
                "0a9f875b9769ce4b"
            ],
            [
                "1d481640e8640cc0"
            ]
        ]
    },
    {
        "id": "46652f734941bd20",
        "type": "switch",
        "z": "82c27bbba924f8af",
        "name": "reg 0x551 bit 0 set?",
        "property": "payload[4]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 150,
        "y": 920,
        "wires": [
            [
                "371e9355eb45d0cd"
            ],
            [
                "d059a48b43767c7c"
            ]
        ]
    },
    {
        "id": "735efb4294cfcbf4",
        "type": "inject",
        "z": "82c27bbba924f8af",
        "name": "Cells info stack 2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "turm2",
        "payloadType": "str",
        "x": 140,
        "y": 360,
        "wires": [
            [
                "06072ae38d2a5c80"
            ]
        ]
    }
]